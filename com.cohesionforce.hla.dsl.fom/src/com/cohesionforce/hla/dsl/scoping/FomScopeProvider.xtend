/*
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.scoping

import com.cohesionforce.hla.dsl.fom.Attribute
import com.cohesionforce.hla.dsl.fom.AttributeClass
import com.cohesionforce.hla.dsl.fom.FomPackage
import com.cohesionforce.hla.dsl.naming.QualifiedNameProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import com.cohesionforce.hla.dsl.fom.Parameter
import com.cohesionforce.hla.dsl.fom.InteractionClass
import java.util.ArrayList
import java.util.List

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FomScopeProvider extends AbstractFomScopeProvider {
	
	val qnp = new QualifiedNameProvider
	
	override getScope(EObject context, EReference reference) {
		if (context instanceof Attribute && reference == FomPackage.Literals.ATTRIBUTE__REF) {
			var container = (context.eContainer as AttributeClass)
			if(container !== null && container.ref instanceof com.cohesionforce.hla.dsl.omt.AttributeClass) {
				var list = new ArrayList<com.cohesionforce.hla.dsl.omt.Attribute>()
				var refClass = container.ref
				var candidates = refClass.components.filter(com.cohesionforce.hla.dsl.omt.Attribute)
				list.addAll(candidates)
				
				// Also need to add the attributes available from superclasses
				var supers = refClass.components.filter(com.cohesionforce.hla.dsl.omt.SuperClass)
				for(sClass : supers) {
					list.addAll(getAttributes(sClass))
				}
				
				// Create scopes for the attributes and return
				var catchScopes = Scopes.scopeFor(list, qnp, IScope.NULLSCOPE)
				return catchScopes
			}
		} else if (context instanceof Parameter && reference == FomPackage.Literals.PARAMETER__REF) {
			var container = (context.eContainer as InteractionClass)
			if(container !== null && container.ref instanceof com.cohesionforce.hla.dsl.omt.Interaction) {
				var list = new ArrayList<com.cohesionforce.hla.dsl.omt.Parameter>()
				var refClass = container.ref
				var candidates = refClass.components.filter(com.cohesionforce.hla.dsl.omt.Parameter)
				list.addAll(candidates)
				
				// Also need to add the parameters available from super interactions
				var supers = refClass.components.filter(com.cohesionforce.hla.dsl.omt.SuperInteraction)
				for(sInteraction: supers) {
					list.addAll(getParameters(sInteraction))
				}
				
				// Create scopes for the parameters and return
				var catchScopes = Scopes.scopeFor(list, qnp, IScope.NULLSCOPE)
				return catchScopes
			}
		}
		return super.getScope(context, reference);
	}
	
	def List<com.cohesionforce.hla.dsl.omt.Attribute> getAttributes(com.cohesionforce.hla.dsl.omt.SuperClass sClass) {
		var rvalue = new ArrayList<com.cohesionforce.hla.dsl.omt.Attribute>()
		if(sClass === null) {
			return rvalue
		}
		var classID = sClass.super
		if(classID.eContainer instanceof com.cohesionforce.hla.dsl.omt.AttributeClass) {
			var superClass = classID.eContainer as com.cohesionforce.hla.dsl.omt.AttributeClass
			rvalue.addAll(superClass.components.filter(com.cohesionforce.hla.dsl.omt.Attribute))
			var supers = superClass.components.filter(com.cohesionforce.hla.dsl.omt.SuperClass)
			for(supersuper : supers) {
				rvalue.addAll(getAttributes(supersuper))
			}
		}
		return rvalue
	}
	
	def List<com.cohesionforce.hla.dsl.omt.Parameter> getParameters(com.cohesionforce.hla.dsl.omt.SuperInteraction superInteraction) {
		var rvalue = new ArrayList<com.cohesionforce.hla.dsl.omt.Parameter>()
		if(superInteraction === null) {
			return rvalue
		}
		var classID = superInteraction.super
		if(classID.eContainer instanceof com.cohesionforce.hla.dsl.omt.Interaction) {
			var superClass = classID.eContainer as com.cohesionforce.hla.dsl.omt.Interaction
			rvalue.addAll(superClass.components.filter(com.cohesionforce.hla.dsl.omt.Parameter))
			var supers = superClass.components.filter(com.cohesionforce.hla.dsl.omt.SuperInteraction)
			for(supersuper : supers) {
				rvalue.addAll(getParameters(supersuper))
			}
		}
		return rvalue
	}
}
