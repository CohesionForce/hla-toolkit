/*
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.scoping

import com.cohesionforce.hla.dsl.fom.Attribute
import com.cohesionforce.hla.dsl.fom.AttributeClass
import com.cohesionforce.hla.dsl.fom.FomPackage
import com.cohesionforce.hla.dsl.naming.QualifiedNameProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import com.cohesionforce.hla.dsl.fom.Parameter
import com.cohesionforce.hla.dsl.fom.InteractionClass

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FomScopeProvider extends AbstractFomScopeProvider {
	
	val qnp = new QualifiedNameProvider
	
	override getScope(EObject context, EReference reference) {
		if (context instanceof Attribute && reference == FomPackage.Literals.ATTRIBUTE__REF) {
			var container = (context.eContainer as AttributeClass)
			if(container !== null && container.ref instanceof com.cohesionforce.hla.dsl.omt.AttributeClass) {
				var refClass = container.ref
				var candidates = refClass.components.filter(com.cohesionforce.hla.dsl.omt.Attribute)
				var catchScopes = Scopes.scopeFor(candidates, qnp, IScope.NULLSCOPE)
				return catchScopes
			}
		} else if (context instanceof Parameter && reference == FomPackage.Literals.PARAMETER__REF) {
			var container = (context.eContainer as InteractionClass)
			if(container !== null && container.ref instanceof com.cohesionforce.hla.dsl.omt.Interaction) {
				var refClass = container.ref
				var candidates = refClass.components.filter(com.cohesionforce.hla.dsl.omt.Parameter)
				var catchScopes = Scopes.scopeFor(candidates, qnp, IScope.NULLSCOPE)
				return catchScopes
			}
		}
		return super.getScope(context, reference);
	}
	
}
