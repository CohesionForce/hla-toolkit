/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.fom.impl;

import com.cohesionforce.hla.dsl.fom.FEDversion;
import com.cohesionforce.hla.dsl.fom.Fed;
import com.cohesionforce.hla.dsl.fom.Federation;
import com.cohesionforce.hla.dsl.fom.FomPackage;
import com.cohesionforce.hla.dsl.fom.Space;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fed</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.cohesionforce.hla.dsl.fom.impl.FedImpl#getFederation <em>Federation</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.fom.impl.FedImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.fom.impl.FedImpl#getSpaces <em>Spaces</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.fom.impl.FedImpl#getClasses <em>Classes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FedImpl extends MinimalEObjectImpl.Container implements Fed
{
  /**
   * The cached value of the '{@link #getFederation() <em>Federation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFederation()
   * @generated
   * @ordered
   */
  protected Federation federation;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected FEDversion version;

  /**
   * The cached value of the '{@link #getSpaces() <em>Spaces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpaces()
   * @generated
   * @ordered
   */
  protected EList<Space> spaces;

  /**
   * The cached value of the '{@link #getClasses() <em>Classes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClasses()
   * @generated
   * @ordered
   */
  protected EList<EObject> classes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FedImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FomPackage.Literals.FED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Federation getFederation()
  {
    return federation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFederation(Federation newFederation, NotificationChain msgs)
  {
    Federation oldFederation = federation;
    federation = newFederation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FomPackage.FED__FEDERATION, oldFederation, newFederation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFederation(Federation newFederation)
  {
    if (newFederation != federation)
    {
      NotificationChain msgs = null;
      if (federation != null)
        msgs = ((InternalEObject)federation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FomPackage.FED__FEDERATION, null, msgs);
      if (newFederation != null)
        msgs = ((InternalEObject)newFederation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FomPackage.FED__FEDERATION, null, msgs);
      msgs = basicSetFederation(newFederation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FomPackage.FED__FEDERATION, newFederation, newFederation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FEDversion getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVersion(FEDversion newVersion, NotificationChain msgs)
  {
    FEDversion oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FomPackage.FED__VERSION, oldVersion, newVersion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVersion(FEDversion newVersion)
  {
    if (newVersion != version)
    {
      NotificationChain msgs = null;
      if (version != null)
        msgs = ((InternalEObject)version).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FomPackage.FED__VERSION, null, msgs);
      if (newVersion != null)
        msgs = ((InternalEObject)newVersion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FomPackage.FED__VERSION, null, msgs);
      msgs = basicSetVersion(newVersion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FomPackage.FED__VERSION, newVersion, newVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Space> getSpaces()
  {
    if (spaces == null)
    {
      spaces = new EObjectContainmentEList<Space>(Space.class, this, FomPackage.FED__SPACES);
    }
    return spaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EObject> getClasses()
  {
    if (classes == null)
    {
      classes = new EObjectContainmentEList<EObject>(EObject.class, this, FomPackage.FED__CLASSES);
    }
    return classes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FomPackage.FED__FEDERATION:
        return basicSetFederation(null, msgs);
      case FomPackage.FED__VERSION:
        return basicSetVersion(null, msgs);
      case FomPackage.FED__SPACES:
        return ((InternalEList<?>)getSpaces()).basicRemove(otherEnd, msgs);
      case FomPackage.FED__CLASSES:
        return ((InternalEList<?>)getClasses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FomPackage.FED__FEDERATION:
        return getFederation();
      case FomPackage.FED__VERSION:
        return getVersion();
      case FomPackage.FED__SPACES:
        return getSpaces();
      case FomPackage.FED__CLASSES:
        return getClasses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FomPackage.FED__FEDERATION:
        setFederation((Federation)newValue);
        return;
      case FomPackage.FED__VERSION:
        setVersion((FEDversion)newValue);
        return;
      case FomPackage.FED__SPACES:
        getSpaces().clear();
        getSpaces().addAll((Collection<? extends Space>)newValue);
        return;
      case FomPackage.FED__CLASSES:
        getClasses().clear();
        getClasses().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FomPackage.FED__FEDERATION:
        setFederation((Federation)null);
        return;
      case FomPackage.FED__VERSION:
        setVersion((FEDversion)null);
        return;
      case FomPackage.FED__SPACES:
        getSpaces().clear();
        return;
      case FomPackage.FED__CLASSES:
        getClasses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FomPackage.FED__FEDERATION:
        return federation != null;
      case FomPackage.FED__VERSION:
        return version != null;
      case FomPackage.FED__SPACES:
        return spaces != null && !spaces.isEmpty();
      case FomPackage.FED__CLASSES:
        return classes != null && !classes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FedImpl
