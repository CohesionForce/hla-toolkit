/*
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.serializer;

import com.cohesionforce.hla.dsl.fom.Attribute;
import com.cohesionforce.hla.dsl.fom.AttributeClass;
import com.cohesionforce.hla.dsl.fom.Dimension;
import com.cohesionforce.hla.dsl.fom.FEDversion;
import com.cohesionforce.hla.dsl.fom.Fed;
import com.cohesionforce.hla.dsl.fom.Federation;
import com.cohesionforce.hla.dsl.fom.FomPackage;
import com.cohesionforce.hla.dsl.fom.InteractionClass;
import com.cohesionforce.hla.dsl.fom.Space;
import com.cohesionforce.hla.dsl.services.FomGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FomSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FomGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FomPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FomPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case FomPackage.ATTRIBUTE_CLASS:
				sequence_AttributeClass(context, (AttributeClass) semanticObject); 
				return; 
			case FomPackage.DIMENSION:
				sequence_Dimension(context, (Dimension) semanticObject); 
				return; 
			case FomPackage.FE_DVERSION:
				sequence_FEDversion(context, (FEDversion) semanticObject); 
				return; 
			case FomPackage.FED:
				sequence_Fed(context, (Fed) semanticObject); 
				return; 
			case FomPackage.FEDERATION:
				sequence_Federation(context, (Federation) semanticObject); 
				return; 
			case FomPackage.INTERACTION_CLASS:
				sequence_InteractionClass(context, (InteractionClass) semanticObject); 
				return; 
			case FomPackage.PARAMETER:
				sequence_Parameter(context, (com.cohesionforce.hla.dsl.fom.Parameter) semanticObject); 
				return; 
			case FomPackage.SPACE:
				sequence_Space(context, (Space) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeClass returns AttributeClass
	 *
	 * Constraint:
	 *     (name=ValidID attributes+=Attribute* classes+=AttributeClass*)
	 */
	protected void sequence_AttributeClass(ISerializationContext context, AttributeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ValidID (transport='reliable' | transport='best_effort') (order='timestamp' | order='receive') space=[Space|ID]?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dimension returns Dimension
	 *
	 * Constraint:
	 *     name=ValidID
	 */
	protected void sequence_Dimension(ISerializationContext context, Dimension semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FomPackage.Literals.DIMENSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FomPackage.Literals.DIMENSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDimensionAccess().getNameValidIDParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FEDversion returns FEDversion
	 *
	 * Constraint:
	 *     version=TEXT
	 */
	protected void sequence_FEDversion(ISerializationContext context, FEDversion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FomPackage.Literals.FE_DVERSION__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FomPackage.Literals.FE_DVERSION__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFEDversionAccess().getVersionTEXTTerminalRuleCall_2_0(), semanticObject.getVersion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fed returns Fed
	 *
	 * Constraint:
	 *     (federation=Federation version=FEDversion spaces+=Space* classes+=AttributeClass* classes+=InteractionClass*)
	 */
	protected void sequence_Fed(ISerializationContext context, Fed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Federation returns Federation
	 *
	 * Constraint:
	 *     (name=ValidID | name=TEXT)
	 */
	protected void sequence_Federation(ISerializationContext context, Federation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionClass returns InteractionClass
	 *
	 * Constraint:
	 *     (
	 *         name=ValidID 
	 *         (transport='reliable' | transport='best_effort') 
	 *         (order='timestamp' | order='receive') 
	 *         space=[Space|ID]? 
	 *         parameters+=Parameter* 
	 *         classes+=InteractionClass*
	 *     )
	 */
	protected void sequence_InteractionClass(ISerializationContext context, InteractionClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=ValidID
	 */
	protected void sequence_Parameter(ISerializationContext context, com.cohesionforce.hla.dsl.fom.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FomPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FomPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Space
	 *
	 * Constraint:
	 *     (name=ValidID dimensions+=Dimension*)
	 */
	protected void sequence_Space(ISerializationContext context, Space semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
