/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.omt.impl;

import com.cohesionforce.hla.dsl.omt.Accuracy;
import com.cohesionforce.hla.dsl.omt.NoteRef;
import com.cohesionforce.hla.dsl.omt.OmtPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Accuracy</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.AccuracyImpl#getAccuracy <em>Accuracy</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.AccuracyImpl#getAccuracyNote <em>Accuracy Note</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AccuracyImpl extends MinimalEObjectImpl.Container implements Accuracy
{
  /**
   * The default value of the '{@link #getAccuracy() <em>Accuracy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccuracy()
   * @generated
   * @ordered
   */
  protected static final String ACCURACY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAccuracy() <em>Accuracy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccuracy()
   * @generated
   * @ordered
   */
  protected String accuracy = ACCURACY_EDEFAULT;

  /**
   * The cached value of the '{@link #getAccuracyNote() <em>Accuracy Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccuracyNote()
   * @generated
   * @ordered
   */
  protected NoteRef accuracyNote;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AccuracyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OmtPackage.Literals.ACCURACY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAccuracy()
  {
    return accuracy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAccuracy(String newAccuracy)
  {
    String oldAccuracy = accuracy;
    accuracy = newAccuracy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.ACCURACY__ACCURACY, oldAccuracy, accuracy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getAccuracyNote()
  {
    return accuracyNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAccuracyNote(NoteRef newAccuracyNote, NotificationChain msgs)
  {
    NoteRef oldAccuracyNote = accuracyNote;
    accuracyNote = newAccuracyNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.ACCURACY__ACCURACY_NOTE, oldAccuracyNote, newAccuracyNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAccuracyNote(NoteRef newAccuracyNote)
  {
    if (newAccuracyNote != accuracyNote)
    {
      NotificationChain msgs = null;
      if (accuracyNote != null)
        msgs = ((InternalEObject)accuracyNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.ACCURACY__ACCURACY_NOTE, null, msgs);
      if (newAccuracyNote != null)
        msgs = ((InternalEObject)newAccuracyNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.ACCURACY__ACCURACY_NOTE, null, msgs);
      msgs = basicSetAccuracyNote(newAccuracyNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.ACCURACY__ACCURACY_NOTE, newAccuracyNote, newAccuracyNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OmtPackage.ACCURACY__ACCURACY_NOTE:
        return basicSetAccuracyNote(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OmtPackage.ACCURACY__ACCURACY:
        return getAccuracy();
      case OmtPackage.ACCURACY__ACCURACY_NOTE:
        return getAccuracyNote();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OmtPackage.ACCURACY__ACCURACY:
        setAccuracy((String)newValue);
        return;
      case OmtPackage.ACCURACY__ACCURACY_NOTE:
        setAccuracyNote((NoteRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.ACCURACY__ACCURACY:
        setAccuracy(ACCURACY_EDEFAULT);
        return;
      case OmtPackage.ACCURACY__ACCURACY_NOTE:
        setAccuracyNote((NoteRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.ACCURACY__ACCURACY:
        return ACCURACY_EDEFAULT == null ? accuracy != null : !ACCURACY_EDEFAULT.equals(accuracy);
      case OmtPackage.ACCURACY__ACCURACY_NOTE:
        return accuracyNote != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (accuracy: ");
    result.append(accuracy);
    result.append(')');
    return result.toString();
  }

} //AccuracyImpl
