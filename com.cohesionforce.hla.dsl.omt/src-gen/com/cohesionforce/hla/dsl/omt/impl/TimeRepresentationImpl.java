/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.omt.impl;

import com.cohesionforce.hla.dsl.omt.NoteRef;
import com.cohesionforce.hla.dsl.omt.OmtPackage;
import com.cohesionforce.hla.dsl.omt.TimeRepresentation;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Representation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getUnits <em>Units</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getUnitsNote <em>Units Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getMin <em>Min</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getMinNote <em>Min Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getMax <em>Max</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getMaxNote <em>Max Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getInitial <em>Initial</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getInitialNote <em>Initial Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getDataType <em>Data Type</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getTypeNote <em>Type Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getOperators <em>Operators</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.TimeRepresentationImpl#getOperatorsNote <em>Operators Note</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimeRepresentationImpl extends MinimalEObjectImpl.Container implements TimeRepresentation
{
  /**
   * The default value of the '{@link #getUnits() <em>Units</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected static final String UNITS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnits() <em>Units</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected String units = UNITS_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnitsNote() <em>Units Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnitsNote()
   * @generated
   * @ordered
   */
  protected NoteRef unitsNote;

  /**
   * The default value of the '{@link #getMin() <em>Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMin()
   * @generated
   * @ordered
   */
  protected static final String MIN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMin() <em>Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMin()
   * @generated
   * @ordered
   */
  protected String min = MIN_EDEFAULT;

  /**
   * The cached value of the '{@link #getMinNote() <em>Min Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinNote()
   * @generated
   * @ordered
   */
  protected NoteRef minNote;

  /**
   * The default value of the '{@link #getMax() <em>Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected static final String MAX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMax() <em>Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected String max = MAX_EDEFAULT;

  /**
   * The cached value of the '{@link #getMaxNote() <em>Max Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxNote()
   * @generated
   * @ordered
   */
  protected NoteRef maxNote;

  /**
   * The default value of the '{@link #getInitial() <em>Initial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial()
   * @generated
   * @ordered
   */
  protected static final String INITIAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInitial() <em>Initial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial()
   * @generated
   * @ordered
   */
  protected String initial = INITIAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getInitialNote() <em>Initial Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitialNote()
   * @generated
   * @ordered
   */
  protected NoteRef initialNote;

  /**
   * The default value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected static final String DATA_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected String dataType = DATA_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getTypeNote() <em>Type Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeNote()
   * @generated
   * @ordered
   */
  protected NoteRef typeNote;

  /**
   * The default value of the '{@link #getOperators() <em>Operators</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperators()
   * @generated
   * @ordered
   */
  protected static final String OPERATORS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperators() <em>Operators</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperators()
   * @generated
   * @ordered
   */
  protected String operators = OPERATORS_EDEFAULT;

  /**
   * The cached value of the '{@link #getOperatorsNote() <em>Operators Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatorsNote()
   * @generated
   * @ordered
   */
  protected NoteRef operatorsNote;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimeRepresentationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OmtPackage.Literals.TIME_REPRESENTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUnits()
  {
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnits(String newUnits)
  {
    String oldUnits = units;
    units = newUnits;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__UNITS, oldUnits, units));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getUnitsNote()
  {
    return unitsNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnitsNote(NoteRef newUnitsNote, NotificationChain msgs)
  {
    NoteRef oldUnitsNote = unitsNote;
    unitsNote = newUnitsNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__UNITS_NOTE, oldUnitsNote, newUnitsNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnitsNote(NoteRef newUnitsNote)
  {
    if (newUnitsNote != unitsNote)
    {
      NotificationChain msgs = null;
      if (unitsNote != null)
        msgs = ((InternalEObject)unitsNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__UNITS_NOTE, null, msgs);
      if (newUnitsNote != null)
        msgs = ((InternalEObject)newUnitsNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__UNITS_NOTE, null, msgs);
      msgs = basicSetUnitsNote(newUnitsNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__UNITS_NOTE, newUnitsNote, newUnitsNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMin()
  {
    return min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMin(String newMin)
  {
    String oldMin = min;
    min = newMin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__MIN, oldMin, min));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getMinNote()
  {
    return minNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMinNote(NoteRef newMinNote, NotificationChain msgs)
  {
    NoteRef oldMinNote = minNote;
    minNote = newMinNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__MIN_NOTE, oldMinNote, newMinNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinNote(NoteRef newMinNote)
  {
    if (newMinNote != minNote)
    {
      NotificationChain msgs = null;
      if (minNote != null)
        msgs = ((InternalEObject)minNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__MIN_NOTE, null, msgs);
      if (newMinNote != null)
        msgs = ((InternalEObject)newMinNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__MIN_NOTE, null, msgs);
      msgs = basicSetMinNote(newMinNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__MIN_NOTE, newMinNote, newMinNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMax()
  {
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMax(String newMax)
  {
    String oldMax = max;
    max = newMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__MAX, oldMax, max));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getMaxNote()
  {
    return maxNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaxNote(NoteRef newMaxNote, NotificationChain msgs)
  {
    NoteRef oldMaxNote = maxNote;
    maxNote = newMaxNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__MAX_NOTE, oldMaxNote, newMaxNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxNote(NoteRef newMaxNote)
  {
    if (newMaxNote != maxNote)
    {
      NotificationChain msgs = null;
      if (maxNote != null)
        msgs = ((InternalEObject)maxNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__MAX_NOTE, null, msgs);
      if (newMaxNote != null)
        msgs = ((InternalEObject)newMaxNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__MAX_NOTE, null, msgs);
      msgs = basicSetMaxNote(newMaxNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__MAX_NOTE, newMaxNote, newMaxNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getInitial()
  {
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitial(String newInitial)
  {
    String oldInitial = initial;
    initial = newInitial;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__INITIAL, oldInitial, initial));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getInitialNote()
  {
    return initialNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitialNote(NoteRef newInitialNote, NotificationChain msgs)
  {
    NoteRef oldInitialNote = initialNote;
    initialNote = newInitialNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE, oldInitialNote, newInitialNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitialNote(NoteRef newInitialNote)
  {
    if (newInitialNote != initialNote)
    {
      NotificationChain msgs = null;
      if (initialNote != null)
        msgs = ((InternalEObject)initialNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE, null, msgs);
      if (newInitialNote != null)
        msgs = ((InternalEObject)newInitialNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE, null, msgs);
      msgs = basicSetInitialNote(newInitialNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE, newInitialNote, newInitialNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDataType()
  {
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDataType(String newDataType)
  {
    String oldDataType = dataType;
    dataType = newDataType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__DATA_TYPE, oldDataType, dataType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getTypeNote()
  {
    return typeNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeNote(NoteRef newTypeNote, NotificationChain msgs)
  {
    NoteRef oldTypeNote = typeNote;
    typeNote = newTypeNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__TYPE_NOTE, oldTypeNote, newTypeNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeNote(NoteRef newTypeNote)
  {
    if (newTypeNote != typeNote)
    {
      NotificationChain msgs = null;
      if (typeNote != null)
        msgs = ((InternalEObject)typeNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__TYPE_NOTE, null, msgs);
      if (newTypeNote != null)
        msgs = ((InternalEObject)newTypeNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__TYPE_NOTE, null, msgs);
      msgs = basicSetTypeNote(newTypeNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__TYPE_NOTE, newTypeNote, newTypeNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOperators()
  {
    return operators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperators(String newOperators)
  {
    String oldOperators = operators;
    operators = newOperators;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__OPERATORS, oldOperators, operators));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getOperatorsNote()
  {
    return operatorsNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperatorsNote(NoteRef newOperatorsNote, NotificationChain msgs)
  {
    NoteRef oldOperatorsNote = operatorsNote;
    operatorsNote = newOperatorsNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE, oldOperatorsNote, newOperatorsNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperatorsNote(NoteRef newOperatorsNote)
  {
    if (newOperatorsNote != operatorsNote)
    {
      NotificationChain msgs = null;
      if (operatorsNote != null)
        msgs = ((InternalEObject)operatorsNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE, null, msgs);
      if (newOperatorsNote != null)
        msgs = ((InternalEObject)newOperatorsNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE, null, msgs);
      msgs = basicSetOperatorsNote(newOperatorsNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE, newOperatorsNote, newOperatorsNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OmtPackage.TIME_REPRESENTATION__UNITS_NOTE:
        return basicSetUnitsNote(null, msgs);
      case OmtPackage.TIME_REPRESENTATION__MIN_NOTE:
        return basicSetMinNote(null, msgs);
      case OmtPackage.TIME_REPRESENTATION__MAX_NOTE:
        return basicSetMaxNote(null, msgs);
      case OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE:
        return basicSetInitialNote(null, msgs);
      case OmtPackage.TIME_REPRESENTATION__TYPE_NOTE:
        return basicSetTypeNote(null, msgs);
      case OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE:
        return basicSetOperatorsNote(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OmtPackage.TIME_REPRESENTATION__UNITS:
        return getUnits();
      case OmtPackage.TIME_REPRESENTATION__UNITS_NOTE:
        return getUnitsNote();
      case OmtPackage.TIME_REPRESENTATION__MIN:
        return getMin();
      case OmtPackage.TIME_REPRESENTATION__MIN_NOTE:
        return getMinNote();
      case OmtPackage.TIME_REPRESENTATION__MAX:
        return getMax();
      case OmtPackage.TIME_REPRESENTATION__MAX_NOTE:
        return getMaxNote();
      case OmtPackage.TIME_REPRESENTATION__INITIAL:
        return getInitial();
      case OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE:
        return getInitialNote();
      case OmtPackage.TIME_REPRESENTATION__DATA_TYPE:
        return getDataType();
      case OmtPackage.TIME_REPRESENTATION__TYPE_NOTE:
        return getTypeNote();
      case OmtPackage.TIME_REPRESENTATION__OPERATORS:
        return getOperators();
      case OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE:
        return getOperatorsNote();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OmtPackage.TIME_REPRESENTATION__UNITS:
        setUnits((String)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__UNITS_NOTE:
        setUnitsNote((NoteRef)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__MIN:
        setMin((String)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__MIN_NOTE:
        setMinNote((NoteRef)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__MAX:
        setMax((String)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__MAX_NOTE:
        setMaxNote((NoteRef)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__INITIAL:
        setInitial((String)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE:
        setInitialNote((NoteRef)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__DATA_TYPE:
        setDataType((String)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__TYPE_NOTE:
        setTypeNote((NoteRef)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__OPERATORS:
        setOperators((String)newValue);
        return;
      case OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE:
        setOperatorsNote((NoteRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.TIME_REPRESENTATION__UNITS:
        setUnits(UNITS_EDEFAULT);
        return;
      case OmtPackage.TIME_REPRESENTATION__UNITS_NOTE:
        setUnitsNote((NoteRef)null);
        return;
      case OmtPackage.TIME_REPRESENTATION__MIN:
        setMin(MIN_EDEFAULT);
        return;
      case OmtPackage.TIME_REPRESENTATION__MIN_NOTE:
        setMinNote((NoteRef)null);
        return;
      case OmtPackage.TIME_REPRESENTATION__MAX:
        setMax(MAX_EDEFAULT);
        return;
      case OmtPackage.TIME_REPRESENTATION__MAX_NOTE:
        setMaxNote((NoteRef)null);
        return;
      case OmtPackage.TIME_REPRESENTATION__INITIAL:
        setInitial(INITIAL_EDEFAULT);
        return;
      case OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE:
        setInitialNote((NoteRef)null);
        return;
      case OmtPackage.TIME_REPRESENTATION__DATA_TYPE:
        setDataType(DATA_TYPE_EDEFAULT);
        return;
      case OmtPackage.TIME_REPRESENTATION__TYPE_NOTE:
        setTypeNote((NoteRef)null);
        return;
      case OmtPackage.TIME_REPRESENTATION__OPERATORS:
        setOperators(OPERATORS_EDEFAULT);
        return;
      case OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE:
        setOperatorsNote((NoteRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.TIME_REPRESENTATION__UNITS:
        return UNITS_EDEFAULT == null ? units != null : !UNITS_EDEFAULT.equals(units);
      case OmtPackage.TIME_REPRESENTATION__UNITS_NOTE:
        return unitsNote != null;
      case OmtPackage.TIME_REPRESENTATION__MIN:
        return MIN_EDEFAULT == null ? min != null : !MIN_EDEFAULT.equals(min);
      case OmtPackage.TIME_REPRESENTATION__MIN_NOTE:
        return minNote != null;
      case OmtPackage.TIME_REPRESENTATION__MAX:
        return MAX_EDEFAULT == null ? max != null : !MAX_EDEFAULT.equals(max);
      case OmtPackage.TIME_REPRESENTATION__MAX_NOTE:
        return maxNote != null;
      case OmtPackage.TIME_REPRESENTATION__INITIAL:
        return INITIAL_EDEFAULT == null ? initial != null : !INITIAL_EDEFAULT.equals(initial);
      case OmtPackage.TIME_REPRESENTATION__INITIAL_NOTE:
        return initialNote != null;
      case OmtPackage.TIME_REPRESENTATION__DATA_TYPE:
        return DATA_TYPE_EDEFAULT == null ? dataType != null : !DATA_TYPE_EDEFAULT.equals(dataType);
      case OmtPackage.TIME_REPRESENTATION__TYPE_NOTE:
        return typeNote != null;
      case OmtPackage.TIME_REPRESENTATION__OPERATORS:
        return OPERATORS_EDEFAULT == null ? operators != null : !OPERATORS_EDEFAULT.equals(operators);
      case OmtPackage.TIME_REPRESENTATION__OPERATORS_NOTE:
        return operatorsNote != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (units: ");
    result.append(units);
    result.append(", min: ");
    result.append(min);
    result.append(", max: ");
    result.append(max);
    result.append(", initial: ");
    result.append(initial);
    result.append(", dataType: ");
    result.append(dataType);
    result.append(", operators: ");
    result.append(operators);
    result.append(')');
    return result.toString();
  }

} //TimeRepresentationImpl
