/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.omt.impl;

import com.cohesionforce.hla.dsl.omt.NoteRef;
import com.cohesionforce.hla.dsl.omt.OmtPackage;
import com.cohesionforce.hla.dsl.omt.Resolution;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Resolution</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.ResolutionImpl#getResolution <em>Resolution</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.ResolutionImpl#getResolutionNote <em>Resolution Note</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ResolutionImpl extends MinimalEObjectImpl.Container implements Resolution
{
  /**
   * The default value of the '{@link #getResolution() <em>Resolution</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResolution()
   * @generated
   * @ordered
   */
  protected static final String RESOLUTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getResolution() <em>Resolution</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResolution()
   * @generated
   * @ordered
   */
  protected String resolution = RESOLUTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getResolutionNote() <em>Resolution Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResolutionNote()
   * @generated
   * @ordered
   */
  protected NoteRef resolutionNote;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResolutionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OmtPackage.Literals.RESOLUTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getResolution()
  {
    return resolution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setResolution(String newResolution)
  {
    String oldResolution = resolution;
    resolution = newResolution;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.RESOLUTION__RESOLUTION, oldResolution, resolution));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getResolutionNote()
  {
    return resolutionNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetResolutionNote(NoteRef newResolutionNote, NotificationChain msgs)
  {
    NoteRef oldResolutionNote = resolutionNote;
    resolutionNote = newResolutionNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.RESOLUTION__RESOLUTION_NOTE, oldResolutionNote, newResolutionNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setResolutionNote(NoteRef newResolutionNote)
  {
    if (newResolutionNote != resolutionNote)
    {
      NotificationChain msgs = null;
      if (resolutionNote != null)
        msgs = ((InternalEObject)resolutionNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.RESOLUTION__RESOLUTION_NOTE, null, msgs);
      if (newResolutionNote != null)
        msgs = ((InternalEObject)newResolutionNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.RESOLUTION__RESOLUTION_NOTE, null, msgs);
      msgs = basicSetResolutionNote(newResolutionNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.RESOLUTION__RESOLUTION_NOTE, newResolutionNote, newResolutionNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OmtPackage.RESOLUTION__RESOLUTION_NOTE:
        return basicSetResolutionNote(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OmtPackage.RESOLUTION__RESOLUTION:
        return getResolution();
      case OmtPackage.RESOLUTION__RESOLUTION_NOTE:
        return getResolutionNote();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OmtPackage.RESOLUTION__RESOLUTION:
        setResolution((String)newValue);
        return;
      case OmtPackage.RESOLUTION__RESOLUTION_NOTE:
        setResolutionNote((NoteRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.RESOLUTION__RESOLUTION:
        setResolution(RESOLUTION_EDEFAULT);
        return;
      case OmtPackage.RESOLUTION__RESOLUTION_NOTE:
        setResolutionNote((NoteRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.RESOLUTION__RESOLUTION:
        return RESOLUTION_EDEFAULT == null ? resolution != null : !RESOLUTION_EDEFAULT.equals(resolution);
      case OmtPackage.RESOLUTION__RESOLUTION_NOTE:
        return resolutionNote != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (resolution: ");
    result.append(resolution);
    result.append(')');
    return result.toString();
  }

} //ResolutionImpl
