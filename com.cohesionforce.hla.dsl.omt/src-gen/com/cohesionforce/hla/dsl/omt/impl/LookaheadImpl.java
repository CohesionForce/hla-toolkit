/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.omt.impl;

import com.cohesionforce.hla.dsl.omt.Lookahead;
import com.cohesionforce.hla.dsl.omt.NoteRef;
import com.cohesionforce.hla.dsl.omt.OmtPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Lookahead</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.LookaheadImpl#getUnits <em>Units</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.LookaheadImpl#getUnitsNote <em>Units Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.LookaheadImpl#getDataType <em>Data Type</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.LookaheadImpl#getTypeNote <em>Type Note</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.LookaheadImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link com.cohesionforce.hla.dsl.omt.impl.LookaheadImpl#getOperatorNote <em>Operator Note</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LookaheadImpl extends MinimalEObjectImpl.Container implements Lookahead
{
  /**
   * The default value of the '{@link #getUnits() <em>Units</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected static final String UNITS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnits() <em>Units</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected String units = UNITS_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnitsNote() <em>Units Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnitsNote()
   * @generated
   * @ordered
   */
  protected NoteRef unitsNote;

  /**
   * The default value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected static final String DATA_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDataType() <em>Data Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataType()
   * @generated
   * @ordered
   */
  protected String dataType = DATA_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getTypeNote() <em>Type Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeNote()
   * @generated
   * @ordered
   */
  protected NoteRef typeNote;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getOperatorNote() <em>Operator Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatorNote()
   * @generated
   * @ordered
   */
  protected NoteRef operatorNote;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LookaheadImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OmtPackage.Literals.LOOKAHEAD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUnits()
  {
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnits(String newUnits)
  {
    String oldUnits = units;
    units = newUnits;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__UNITS, oldUnits, units));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getUnitsNote()
  {
    return unitsNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnitsNote(NoteRef newUnitsNote, NotificationChain msgs)
  {
    NoteRef oldUnitsNote = unitsNote;
    unitsNote = newUnitsNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__UNITS_NOTE, oldUnitsNote, newUnitsNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnitsNote(NoteRef newUnitsNote)
  {
    if (newUnitsNote != unitsNote)
    {
      NotificationChain msgs = null;
      if (unitsNote != null)
        msgs = ((InternalEObject)unitsNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.LOOKAHEAD__UNITS_NOTE, null, msgs);
      if (newUnitsNote != null)
        msgs = ((InternalEObject)newUnitsNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.LOOKAHEAD__UNITS_NOTE, null, msgs);
      msgs = basicSetUnitsNote(newUnitsNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__UNITS_NOTE, newUnitsNote, newUnitsNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDataType()
  {
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDataType(String newDataType)
  {
    String oldDataType = dataType;
    dataType = newDataType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__DATA_TYPE, oldDataType, dataType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getTypeNote()
  {
    return typeNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeNote(NoteRef newTypeNote, NotificationChain msgs)
  {
    NoteRef oldTypeNote = typeNote;
    typeNote = newTypeNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__TYPE_NOTE, oldTypeNote, newTypeNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeNote(NoteRef newTypeNote)
  {
    if (newTypeNote != typeNote)
    {
      NotificationChain msgs = null;
      if (typeNote != null)
        msgs = ((InternalEObject)typeNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.LOOKAHEAD__TYPE_NOTE, null, msgs);
      if (newTypeNote != null)
        msgs = ((InternalEObject)newTypeNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.LOOKAHEAD__TYPE_NOTE, null, msgs);
      msgs = basicSetTypeNote(newTypeNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__TYPE_NOTE, newTypeNote, newTypeNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoteRef getOperatorNote()
  {
    return operatorNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperatorNote(NoteRef newOperatorNote, NotificationChain msgs)
  {
    NoteRef oldOperatorNote = operatorNote;
    operatorNote = newOperatorNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__OPERATOR_NOTE, oldOperatorNote, newOperatorNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperatorNote(NoteRef newOperatorNote)
  {
    if (newOperatorNote != operatorNote)
    {
      NotificationChain msgs = null;
      if (operatorNote != null)
        msgs = ((InternalEObject)operatorNote).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OmtPackage.LOOKAHEAD__OPERATOR_NOTE, null, msgs);
      if (newOperatorNote != null)
        msgs = ((InternalEObject)newOperatorNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OmtPackage.LOOKAHEAD__OPERATOR_NOTE, null, msgs);
      msgs = basicSetOperatorNote(newOperatorNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OmtPackage.LOOKAHEAD__OPERATOR_NOTE, newOperatorNote, newOperatorNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OmtPackage.LOOKAHEAD__UNITS_NOTE:
        return basicSetUnitsNote(null, msgs);
      case OmtPackage.LOOKAHEAD__TYPE_NOTE:
        return basicSetTypeNote(null, msgs);
      case OmtPackage.LOOKAHEAD__OPERATOR_NOTE:
        return basicSetOperatorNote(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OmtPackage.LOOKAHEAD__UNITS:
        return getUnits();
      case OmtPackage.LOOKAHEAD__UNITS_NOTE:
        return getUnitsNote();
      case OmtPackage.LOOKAHEAD__DATA_TYPE:
        return getDataType();
      case OmtPackage.LOOKAHEAD__TYPE_NOTE:
        return getTypeNote();
      case OmtPackage.LOOKAHEAD__OPERATOR:
        return getOperator();
      case OmtPackage.LOOKAHEAD__OPERATOR_NOTE:
        return getOperatorNote();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OmtPackage.LOOKAHEAD__UNITS:
        setUnits((String)newValue);
        return;
      case OmtPackage.LOOKAHEAD__UNITS_NOTE:
        setUnitsNote((NoteRef)newValue);
        return;
      case OmtPackage.LOOKAHEAD__DATA_TYPE:
        setDataType((String)newValue);
        return;
      case OmtPackage.LOOKAHEAD__TYPE_NOTE:
        setTypeNote((NoteRef)newValue);
        return;
      case OmtPackage.LOOKAHEAD__OPERATOR:
        setOperator((String)newValue);
        return;
      case OmtPackage.LOOKAHEAD__OPERATOR_NOTE:
        setOperatorNote((NoteRef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.LOOKAHEAD__UNITS:
        setUnits(UNITS_EDEFAULT);
        return;
      case OmtPackage.LOOKAHEAD__UNITS_NOTE:
        setUnitsNote((NoteRef)null);
        return;
      case OmtPackage.LOOKAHEAD__DATA_TYPE:
        setDataType(DATA_TYPE_EDEFAULT);
        return;
      case OmtPackage.LOOKAHEAD__TYPE_NOTE:
        setTypeNote((NoteRef)null);
        return;
      case OmtPackage.LOOKAHEAD__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case OmtPackage.LOOKAHEAD__OPERATOR_NOTE:
        setOperatorNote((NoteRef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OmtPackage.LOOKAHEAD__UNITS:
        return UNITS_EDEFAULT == null ? units != null : !UNITS_EDEFAULT.equals(units);
      case OmtPackage.LOOKAHEAD__UNITS_NOTE:
        return unitsNote != null;
      case OmtPackage.LOOKAHEAD__DATA_TYPE:
        return DATA_TYPE_EDEFAULT == null ? dataType != null : !DATA_TYPE_EDEFAULT.equals(dataType);
      case OmtPackage.LOOKAHEAD__TYPE_NOTE:
        return typeNote != null;
      case OmtPackage.LOOKAHEAD__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case OmtPackage.LOOKAHEAD__OPERATOR_NOTE:
        return operatorNote != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (units: ");
    result.append(units);
    result.append(", dataType: ");
    result.append(dataType);
    result.append(", operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //LookaheadImpl
