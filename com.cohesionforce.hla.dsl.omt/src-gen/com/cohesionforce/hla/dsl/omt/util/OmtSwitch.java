/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.omt.util;

import com.cohesionforce.hla.dsl.omt.Accuracy;
import com.cohesionforce.hla.dsl.omt.AccuracyCondition;
import com.cohesionforce.hla.dsl.omt.Attribute;
import com.cohesionforce.hla.dsl.omt.Cardinality;
import com.cohesionforce.hla.dsl.omt.ClassComponent;
import com.cohesionforce.hla.dsl.omt.ComplexComponent;
import com.cohesionforce.hla.dsl.omt.ComplexDataType;
import com.cohesionforce.hla.dsl.omt.DataType;
import com.cohesionforce.hla.dsl.omt.Description;
import com.cohesionforce.hla.dsl.omt.Dimension;
import com.cohesionforce.hla.dsl.omt.DimensionDomain;
import com.cohesionforce.hla.dsl.omt.DimensionRange;
import com.cohesionforce.hla.dsl.omt.DimensionSet;
import com.cohesionforce.hla.dsl.omt.DimensionSetMember;
import com.cohesionforce.hla.dsl.omt.EnumeratedDataType;
import com.cohesionforce.hla.dsl.omt.Enumeration;
import com.cohesionforce.hla.dsl.omt.FieldName;
import com.cohesionforce.hla.dsl.omt.HLAOMT_DIF_v1_3;
import com.cohesionforce.hla.dsl.omt.Interaction;
import com.cohesionforce.hla.dsl.omt.InteractionComponent;
import com.cohesionforce.hla.dsl.omt.Lookahead;
import com.cohesionforce.hla.dsl.omt.Note;
import com.cohesionforce.hla.dsl.omt.NoteRef;
import com.cohesionforce.hla.dsl.omt.OMTComponent;
import com.cohesionforce.hla.dsl.omt.ObjectModel;
import com.cohesionforce.hla.dsl.omt.OmtPackage;
import com.cohesionforce.hla.dsl.omt.Parameter;
import com.cohesionforce.hla.dsl.omt.Position;
import com.cohesionforce.hla.dsl.omt.Resolution;
import com.cohesionforce.hla.dsl.omt.RoutingSpace;
import com.cohesionforce.hla.dsl.omt.SuperClass;
import com.cohesionforce.hla.dsl.omt.SuperInteraction;
import com.cohesionforce.hla.dsl.omt.TimeRepresentation;
import com.cohesionforce.hla.dsl.omt.TypeReference;
import com.cohesionforce.hla.dsl.omt.Units;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.cohesionforce.hla.dsl.omt.OmtPackage
 * @generated
 */
public class OmtSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OmtPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OmtSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = OmtPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case OmtPackage.HLAOMT_DIF_V1_3:
      {
        HLAOMT_DIF_v1_3 hlaomT_DIF_v1_3 = (HLAOMT_DIF_v1_3)theEObject;
        T result = caseHLAOMT_DIF_v1_3(hlaomT_DIF_v1_3);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.OBJECT_MODEL:
      {
        ObjectModel objectModel = (ObjectModel)theEObject;
        T result = caseObjectModel(objectModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.TIME_REPRESENTATION:
      {
        TimeRepresentation timeRepresentation = (TimeRepresentation)theEObject;
        T result = caseTimeRepresentation(timeRepresentation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.LOOKAHEAD:
      {
        Lookahead lookahead = (Lookahead)theEObject;
        T result = caseLookahead(lookahead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.OMT_COMPONENT:
      {
        OMTComponent omtComponent = (OMTComponent)theEObject;
        T result = caseOMTComponent(omtComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.ROUTING_SPACE:
      {
        RoutingSpace routingSpace = (RoutingSpace)theEObject;
        T result = caseRoutingSpace(routingSpace);
        if (result == null) result = caseOMTComponent(routingSpace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DIMENSION:
      {
        Dimension dimension = (Dimension)theEObject;
        T result = caseDimension(dimension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DIMENSION_DOMAIN:
      {
        DimensionDomain dimensionDomain = (DimensionDomain)theEObject;
        T result = caseDimensionDomain(dimensionDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DIMENSION_RANGE:
      {
        DimensionRange dimensionRange = (DimensionRange)theEObject;
        T result = caseDimensionRange(dimensionRange);
        if (result == null) result = caseDimensionDomain(dimensionRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DIMENSION_SET:
      {
        DimensionSet dimensionSet = (DimensionSet)theEObject;
        T result = caseDimensionSet(dimensionSet);
        if (result == null) result = caseDimensionDomain(dimensionSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DIMENSION_SET_MEMBER:
      {
        DimensionSetMember dimensionSetMember = (DimensionSetMember)theEObject;
        T result = caseDimensionSetMember(dimensionSetMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.CLASS:
      {
        com.cohesionforce.hla.dsl.omt.Class class_ = (com.cohesionforce.hla.dsl.omt.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = caseOMTComponent(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.CLASS_COMPONENT:
      {
        ClassComponent classComponent = (ClassComponent)theEObject;
        T result = caseClassComponent(classComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.SUPER_CLASS:
      {
        SuperClass superClass = (SuperClass)theEObject;
        T result = caseSuperClass(superClass);
        if (result == null) result = caseClassComponent(superClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = caseClassComponent(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.ENUMERATED_DATA_TYPE:
      {
        EnumeratedDataType enumeratedDataType = (EnumeratedDataType)theEObject;
        T result = caseEnumeratedDataType(enumeratedDataType);
        if (result == null) result = caseOMTComponent(enumeratedDataType);
        if (result == null) result = caseTypeReference(enumeratedDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.ENUMERATION:
      {
        Enumeration enumeration = (Enumeration)theEObject;
        T result = caseEnumeration(enumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.COMPLEX_DATA_TYPE:
      {
        ComplexDataType complexDataType = (ComplexDataType)theEObject;
        T result = caseComplexDataType(complexDataType);
        if (result == null) result = caseOMTComponent(complexDataType);
        if (result == null) result = caseTypeReference(complexDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.COMPLEX_COMPONENT:
      {
        ComplexComponent complexComponent = (ComplexComponent)theEObject;
        T result = caseComplexComponent(complexComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.ACCURACY:
      {
        Accuracy accuracy = (Accuracy)theEObject;
        T result = caseAccuracy(accuracy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.ACCURACY_CONDITION:
      {
        AccuracyCondition accuracyCondition = (AccuracyCondition)theEObject;
        T result = caseAccuracyCondition(accuracyCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.RESOLUTION:
      {
        Resolution resolution = (Resolution)theEObject;
        T result = caseResolution(resolution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.POSITION:
      {
        Position position = (Position)theEObject;
        T result = casePosition(position);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.TYPE_REFERENCE:
      {
        TypeReference typeReference = (TypeReference)theEObject;
        T result = caseTypeReference(typeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.FIELD_NAME:
      {
        FieldName fieldName = (FieldName)theEObject;
        T result = caseFieldName(fieldName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.UNITS:
      {
        Units units = (Units)theEObject;
        T result = caseUnits(units);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.CARDINALITY:
      {
        Cardinality cardinality = (Cardinality)theEObject;
        T result = caseCardinality(cardinality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.INTERACTION:
      {
        Interaction interaction = (Interaction)theEObject;
        T result = caseInteraction(interaction);
        if (result == null) result = caseOMTComponent(interaction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.INTERACTION_COMPONENT:
      {
        InteractionComponent interactionComponent = (InteractionComponent)theEObject;
        T result = caseInteractionComponent(interactionComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.SUPER_INTERACTION:
      {
        SuperInteraction superInteraction = (SuperInteraction)theEObject;
        T result = caseSuperInteraction(superInteraction);
        if (result == null) result = caseInteractionComponent(superInteraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseInteractionComponent(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.DESCRIPTION:
      {
        Description description = (Description)theEObject;
        T result = caseDescription(description);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.NOTE:
      {
        Note note = (Note)theEObject;
        T result = caseNote(note);
        if (result == null) result = caseOMTComponent(note);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OmtPackage.NOTE_REF:
      {
        NoteRef noteRef = (NoteRef)theEObject;
        T result = caseNoteRef(noteRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>HLAOMT DIF v1 3</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>HLAOMT DIF v1 3</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHLAOMT_DIF_v1_3(HLAOMT_DIF_v1_3 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectModel(ObjectModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Representation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Representation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeRepresentation(TimeRepresentation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lookahead</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lookahead</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLookahead(Lookahead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OMT Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OMT Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOMTComponent(OMTComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routing Space</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routing Space</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutingSpace(RoutingSpace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dimension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dimension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDimension(Dimension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dimension Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dimension Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDimensionDomain(DimensionDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dimension Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dimension Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDimensionRange(DimensionRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dimension Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dimension Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDimensionSet(DimensionSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dimension Set Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dimension Set Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDimensionSetMember(DimensionSetMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(com.cohesionforce.hla.dsl.omt.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassComponent(ClassComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Super Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Super Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperClass(SuperClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumerated Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumerated Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumeratedDataType(EnumeratedDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumeration(Enumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexDataType(ComplexDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexComponent(ComplexComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Accuracy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Accuracy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAccuracy(Accuracy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Accuracy Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Accuracy Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAccuracyCondition(AccuracyCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resolution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resolution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResolution(Resolution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Position</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Position</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePosition(Position object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeReference(TypeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldName(FieldName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Units</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Units</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnits(Units object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cardinality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cardinality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCardinality(Cardinality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interaction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interaction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInteraction(Interaction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interaction Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interaction Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInteractionComponent(InteractionComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Super Interaction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Super Interaction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperInteraction(SuperInteraction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDescription(Description object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Note</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Note</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNote(Note object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Note Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Note Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoteRef(NoteRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //OmtSwitch
