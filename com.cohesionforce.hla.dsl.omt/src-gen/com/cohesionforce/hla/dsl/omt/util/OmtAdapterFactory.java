/**
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.omt.util;

import com.cohesionforce.hla.dsl.omt.Accuracy;
import com.cohesionforce.hla.dsl.omt.AccuracyCondition;
import com.cohesionforce.hla.dsl.omt.Attribute;
import com.cohesionforce.hla.dsl.omt.Cardinality;
import com.cohesionforce.hla.dsl.omt.ClassComponent;
import com.cohesionforce.hla.dsl.omt.ComplexComponent;
import com.cohesionforce.hla.dsl.omt.ComplexDataType;
import com.cohesionforce.hla.dsl.omt.DataType;
import com.cohesionforce.hla.dsl.omt.Description;
import com.cohesionforce.hla.dsl.omt.Dimension;
import com.cohesionforce.hla.dsl.omt.DimensionDomain;
import com.cohesionforce.hla.dsl.omt.DimensionRange;
import com.cohesionforce.hla.dsl.omt.DimensionSet;
import com.cohesionforce.hla.dsl.omt.DimensionSetMember;
import com.cohesionforce.hla.dsl.omt.EnumeratedDataType;
import com.cohesionforce.hla.dsl.omt.Enumeration;
import com.cohesionforce.hla.dsl.omt.FieldName;
import com.cohesionforce.hla.dsl.omt.HLAOMT_DIF_v1_3;
import com.cohesionforce.hla.dsl.omt.Interaction;
import com.cohesionforce.hla.dsl.omt.InteractionComponent;
import com.cohesionforce.hla.dsl.omt.Lookahead;
import com.cohesionforce.hla.dsl.omt.Note;
import com.cohesionforce.hla.dsl.omt.NoteRef;
import com.cohesionforce.hla.dsl.omt.OMTComponent;
import com.cohesionforce.hla.dsl.omt.ObjectModel;
import com.cohesionforce.hla.dsl.omt.OmtPackage;
import com.cohesionforce.hla.dsl.omt.Parameter;
import com.cohesionforce.hla.dsl.omt.Position;
import com.cohesionforce.hla.dsl.omt.Resolution;
import com.cohesionforce.hla.dsl.omt.RoutingSpace;
import com.cohesionforce.hla.dsl.omt.SuperClass;
import com.cohesionforce.hla.dsl.omt.SuperInteraction;
import com.cohesionforce.hla.dsl.omt.TimeRepresentation;
import com.cohesionforce.hla.dsl.omt.Units;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.cohesionforce.hla.dsl.omt.OmtPackage
 * @generated
 */
public class OmtAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OmtPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OmtAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OmtPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OmtSwitch<Adapter> modelSwitch =
    new OmtSwitch<Adapter>()
    {
      @Override
      public Adapter caseHLAOMT_DIF_v1_3(HLAOMT_DIF_v1_3 object)
      {
        return createHLAOMT_DIF_v1_3Adapter();
      }
      @Override
      public Adapter caseObjectModel(ObjectModel object)
      {
        return createObjectModelAdapter();
      }
      @Override
      public Adapter caseTimeRepresentation(TimeRepresentation object)
      {
        return createTimeRepresentationAdapter();
      }
      @Override
      public Adapter caseLookahead(Lookahead object)
      {
        return createLookaheadAdapter();
      }
      @Override
      public Adapter caseOMTComponent(OMTComponent object)
      {
        return createOMTComponentAdapter();
      }
      @Override
      public Adapter caseRoutingSpace(RoutingSpace object)
      {
        return createRoutingSpaceAdapter();
      }
      @Override
      public Adapter caseDimension(Dimension object)
      {
        return createDimensionAdapter();
      }
      @Override
      public Adapter caseDimensionDomain(DimensionDomain object)
      {
        return createDimensionDomainAdapter();
      }
      @Override
      public Adapter caseDimensionRange(DimensionRange object)
      {
        return createDimensionRangeAdapter();
      }
      @Override
      public Adapter caseDimensionSet(DimensionSet object)
      {
        return createDimensionSetAdapter();
      }
      @Override
      public Adapter caseDimensionSetMember(DimensionSetMember object)
      {
        return createDimensionSetMemberAdapter();
      }
      @Override
      public Adapter caseClass(com.cohesionforce.hla.dsl.omt.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseClassComponent(ClassComponent object)
      {
        return createClassComponentAdapter();
      }
      @Override
      public Adapter caseSuperClass(SuperClass object)
      {
        return createSuperClassAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseEnumeratedDataType(EnumeratedDataType object)
      {
        return createEnumeratedDataTypeAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseComplexDataType(ComplexDataType object)
      {
        return createComplexDataTypeAdapter();
      }
      @Override
      public Adapter caseComplexComponent(ComplexComponent object)
      {
        return createComplexComponentAdapter();
      }
      @Override
      public Adapter caseAccuracy(Accuracy object)
      {
        return createAccuracyAdapter();
      }
      @Override
      public Adapter caseAccuracyCondition(AccuracyCondition object)
      {
        return createAccuracyConditionAdapter();
      }
      @Override
      public Adapter caseResolution(Resolution object)
      {
        return createResolutionAdapter();
      }
      @Override
      public Adapter casePosition(Position object)
      {
        return createPositionAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseFieldName(FieldName object)
      {
        return createFieldNameAdapter();
      }
      @Override
      public Adapter caseUnits(Units object)
      {
        return createUnitsAdapter();
      }
      @Override
      public Adapter caseCardinality(Cardinality object)
      {
        return createCardinalityAdapter();
      }
      @Override
      public Adapter caseInteraction(Interaction object)
      {
        return createInteractionAdapter();
      }
      @Override
      public Adapter caseInteractionComponent(InteractionComponent object)
      {
        return createInteractionComponentAdapter();
      }
      @Override
      public Adapter caseSuperInteraction(SuperInteraction object)
      {
        return createSuperInteractionAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseNote(Note object)
      {
        return createNoteAdapter();
      }
      @Override
      public Adapter caseNoteRef(NoteRef object)
      {
        return createNoteRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.HLAOMT_DIF_v1_3 <em>HLAOMT DIF v1 3</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.HLAOMT_DIF_v1_3
   * @generated
   */
  public Adapter createHLAOMT_DIF_v1_3Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.ObjectModel <em>Object Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.ObjectModel
   * @generated
   */
  public Adapter createObjectModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.TimeRepresentation <em>Time Representation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.TimeRepresentation
   * @generated
   */
  public Adapter createTimeRepresentationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Lookahead <em>Lookahead</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Lookahead
   * @generated
   */
  public Adapter createLookaheadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.OMTComponent <em>OMT Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.OMTComponent
   * @generated
   */
  public Adapter createOMTComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.RoutingSpace <em>Routing Space</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.RoutingSpace
   * @generated
   */
  public Adapter createRoutingSpaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Dimension <em>Dimension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Dimension
   * @generated
   */
  public Adapter createDimensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.DimensionDomain <em>Dimension Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.DimensionDomain
   * @generated
   */
  public Adapter createDimensionDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.DimensionRange <em>Dimension Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.DimensionRange
   * @generated
   */
  public Adapter createDimensionRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.DimensionSet <em>Dimension Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.DimensionSet
   * @generated
   */
  public Adapter createDimensionSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.DimensionSetMember <em>Dimension Set Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.DimensionSetMember
   * @generated
   */
  public Adapter createDimensionSetMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.ClassComponent <em>Class Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.ClassComponent
   * @generated
   */
  public Adapter createClassComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.SuperClass <em>Super Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.SuperClass
   * @generated
   */
  public Adapter createSuperClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.EnumeratedDataType <em>Enumerated Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.EnumeratedDataType
   * @generated
   */
  public Adapter createEnumeratedDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.ComplexDataType <em>Complex Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.ComplexDataType
   * @generated
   */
  public Adapter createComplexDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.ComplexComponent <em>Complex Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.ComplexComponent
   * @generated
   */
  public Adapter createComplexComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Accuracy <em>Accuracy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Accuracy
   * @generated
   */
  public Adapter createAccuracyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.AccuracyCondition <em>Accuracy Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.AccuracyCondition
   * @generated
   */
  public Adapter createAccuracyConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Resolution <em>Resolution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Resolution
   * @generated
   */
  public Adapter createResolutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Position <em>Position</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Position
   * @generated
   */
  public Adapter createPositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.FieldName <em>Field Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.FieldName
   * @generated
   */
  public Adapter createFieldNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Units <em>Units</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Units
   * @generated
   */
  public Adapter createUnitsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Cardinality <em>Cardinality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Cardinality
   * @generated
   */
  public Adapter createCardinalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Interaction <em>Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Interaction
   * @generated
   */
  public Adapter createInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.InteractionComponent <em>Interaction Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.InteractionComponent
   * @generated
   */
  public Adapter createInteractionComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.SuperInteraction <em>Super Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.SuperInteraction
   * @generated
   */
  public Adapter createSuperInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.Note <em>Note</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.Note
   * @generated
   */
  public Adapter createNoteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.cohesionforce.hla.dsl.omt.NoteRef <em>Note Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.cohesionforce.hla.dsl.omt.NoteRef
   * @generated
   */
  public Adapter createNoteRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OmtAdapterFactory
