/*
 * generated by Xtext 2.12.0
 */
package com.cohesionforce.hla.dsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import com.cohesionforce.hla.dsl.omt.InteractionId
import com.cohesionforce.hla.dsl.omt.SuperInteraction
import com.cohesionforce.hla.dsl.omt.OmtPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import com.cohesionforce.hla.dsl.omt.SuperClass
import com.cohesionforce.hla.dsl.omt.ClassId

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class OmtScopeProvider extends AbstractOmtScopeProvider {

	override getScope(EObject context, EReference reference) {
		if(context instanceof SuperInteraction && reference == OmtPackage.Literals.SUPER_INTERACTION__SUPER)
		{
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, InteractionId)
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates)
		} else if(context instanceof SuperClass && reference == OmtPackage.Literals.SUPER_CLASS__SUPER)
		{
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, ClassId)
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates)
		}
	    return super.getScope(context, reference);
	}

}
